datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String      @id @default(cuid())
  name           String
  bio            String?
  email          String      @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  workspaces     Workspace[]
  boards         Board[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  boards    Board[]
}

model Board {
  id              String    @id @default(cuid())
  name            String
  backgroundColor String?
  backgroundImage String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId     String
  lists           List[]
}

model List {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String
  cards       Card[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Card {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
